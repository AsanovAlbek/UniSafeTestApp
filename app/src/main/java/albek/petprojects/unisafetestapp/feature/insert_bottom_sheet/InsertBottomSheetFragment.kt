package albek.petprojects.unisafetestapp.feature.insert_bottom_sheet

import albek.petprojects.unisafetestapp.R
import albek.petprojects.unisafetestapp.core.constant.FragmentResultKeys
import albek.petprojects.unisafetestapp.databinding.InsertItemsBottomSheetFragmentBinding
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.os.bundleOf
import androidx.core.view.isVisible
import androidx.core.widget.addTextChangedListener
import androidx.fragment.app.setFragmentResult
import androidx.fragment.app.setFragmentResultListener
import com.google.android.material.bottomsheet.BottomSheetDialogFragment

class InsertBottomSheetFragment :
    BottomSheetDialogFragment(R.layout.insert_items_bottom_sheet_fragment) {
    private var _binding: InsertItemsBottomSheetFragmentBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = InsertItemsBottomSheetFragmentBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        getBundles()
    }

    private fun getBundles() {
        parentFragmentManager.setFragmentResultListener(
            FragmentResultKeys.REQUIRE_BOTTOM_SHEET_KEY,
            viewLifecycleOwner
        ) { _, bundle ->
            bundle.getBoolean(FragmentResultKeys.WITH_COUNT, false).let { isBundleForShoppingItem ->
                binding.countInputLayout.isVisible = isBundleForShoppingItem
                setListeners(isBundleForShoppingItem)
            }
        }
    }

    /** –°–º–æ—Ç—Ä–∏–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ bundle,
     * @param isBundleForShoppingItem - –ø—Ä–∏—à—ë–ª –ª–∏ bundle –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ShoppingItem,
     * –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ–Ω –ø—Ä–∏—à—ë–ª –¥–ª—è ShoppingList */
    private fun setListeners(isBundleForShoppingItem: Boolean) {
        binding.run {
            closeButton.setOnClickListener { dismiss() }
            addItemButton.setOnClickListener {
                // –§—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ShoppingList –∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ShoppingItem
                // –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏, —Ç—É—Ç –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                // —Å—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –æ–¥–Ω–æ–º—É –Ω—É–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –¥—Ä—É–≥–æ–º—É –Ω–µ—Ç
                // —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è ShoppingListFragment –∏ ShoppingListDetailFragment
                // –¥–µ–ª–∞–µ–º —Ç–∞–∫–∏–µ —Ñ–æ–∫—É—Å—ã ü§°
                val requestKey =
                    if (isBundleForShoppingItem)
                        FragmentResultKeys.REQUIRE_FROM_BOTTOM_SHEET_KEY_WITH_COUNT
                    else
                        FragmentResultKeys.REQUIRE_FROM_BOTTOM_SHEET_KEY
                if (fieldsNotEmptyCondition(isBundleForShoppingItem)) {
                    countInputLayout.error = null
                    nameInputLayout.error = null
                    parentFragmentManager.setFragmentResult(
                        requestKey, bundleOf(
                            FragmentResultKeys.NAME_KEY to binding.nameInputField.text.toString(),
                            FragmentResultKeys.COUNT_KEY to binding.countInputField.text.toString()
                        )
                    )
                    dismiss()
                } else {
                    showErrorHints()
                }
            }
        }
    }

    private fun fieldsNotEmptyCondition(isBundleForShoppingItem: Boolean) = binding.run {
        !isBundleForShoppingItem && nameInputField.text.toString()
            .isNotEmpty() || isBundleForShoppingItem && (nameInputField.text.toString()
            .isNotEmpty() && countInputField.text.toString().isNotEmpty())
    }

    private fun showErrorHints() {
        binding.run {
            countInputLayout.isErrorEnabled = true
            nameInputLayout.isErrorEnabled = true
            countInputLayout.error = getString(R.string.filed_should_be_not_empty)
            nameInputLayout.error = getString(R.string.filed_should_be_not_empty)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "bottomSheetTag"
    }
}